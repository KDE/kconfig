// This file is generated by kconfig_compiler_kf6 from test17.kcfg.
// All changes you do to this file will be lost.

#include "test17.h"

#include <qglobal.h>
#include <QFile>
#include <QQmlEngine>

class Test17Helper
{
  public:
    Test17Helper() : q(nullptr) {}
    ~Test17Helper() { delete q; q = nullptr; }
    Test17Helper(const Test17Helper&) = delete;
    Test17Helper& operator=(const Test17Helper&) = delete;
    Test17 *q;
};
Q_GLOBAL_STATIC(Test17Helper, s_globalTest17)
Test17 *Test17::self()
{
  if (!s_globalTest17()->q) {
    new Test17;
    s_globalTest17()->q->read();
  }

  return s_globalTest17()->q;
}

Test17 *Test17::create(QQmlEngine *, QJSEngine *)
{
  QQmlEngine::setObjectOwnership(self(), QQmlEngine::CppOwnership);
  return self();
}

Test17::Test17( )
  : KConfigSkeleton( QStringLiteral( "muondatasourcesrc" ) )
{
  Q_ASSERT(!s_globalTest17()->q);
  s_globalTest17()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&Test17::itemChanged);

  setCurrentGroup( QStringLiteral( "kamoso" ) );

  KConfigSkeleton::ItemUrl  *itemPicturesDir;
  itemPicturesDir = new KConfigSkeleton::ItemUrl( currentGroup(), QStringLiteral( "picturesDir" ), mPicturesDir );
  addItem( itemPicturesDir, QStringLiteral( "picturesDir" ) );
  KConfigCompilerSignallingItem  *itemBrightness;
  KConfigSkeleton::ItemDouble  *innerItemBrightness;
  innerItemBrightness = new KConfigSkeleton::ItemDouble( currentGroup(), QStringLiteral( "brightness" ), mBrightness, 5.7 );
  itemBrightness = new KConfigCompilerSignallingItem(innerItemBrightness, this, notifyFunction, signalBrightnessChanged);
  addItem( itemBrightness, QStringLiteral( "brightness" ) );
}

double Test17::defaultBrightnessValue_helper()
{

  return 5.7;
}

Test17::~Test17()
{
  if (s_globalTest17.exists() && !s_globalTest17.isDestroyed()) {
    s_globalTest17()->q = nullptr;
  }
}


void Test17::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalBrightnessChanged:
    Q_EMIT brightnessChanged();
    break;
  }
}
