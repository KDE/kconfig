// This file is generated by kconfig_compiler_kf6 from test5.kcfg.
// All changes you do to this file will be lost.

#include "test5.h"

#include <qglobal.h>
#include <QFile>

class Test5Helper
{
  public:
    Test5Helper() : q(nullptr) {}
    ~Test5Helper() { delete q; q = nullptr; }
    Test5Helper(const Test5Helper&) = delete;
    Test5Helper& operator=(const Test5Helper&) = delete;
    Test5 *q;
};
Q_GLOBAL_STATIC(Test5Helper, s_globalTest5)
Test5 *Test5::self()
{
  if (!s_globalTest5()->q) {
    new Test5;
    s_globalTest5()->q->read();
  }

  return s_globalTest5()->q;
}

const char* const Test5::EnumButtonToString[] = { "right", "mid", "left" };

Test5::Test5( QObject *parent )
  : KConfigSkeleton( KConfig::ConfigAssociation::KdeApp, QStringLiteral( "test4rc" ) )
{
  setParent(parent);
  Q_ASSERT(!s_globalTest5()->q);
  s_globalTest5()->q = this;
  setCurrentGroup( QStringLiteral( "Foo" ) );

QColor defaultColor[4] = { Qt::red, Qt::blue, Qt::green, Qt::black };
  KConfigSkeleton::ItemColor  *itemColor[4];
  itemColor[0] = new KConfigSkeleton::ItemColor( currentGroup(), QStringLiteral( "color #0" ), mColor[0], defaultColor[0] );
  addItem( itemColor[0], QStringLiteral( "Color0" ) );
  itemColor[1] = new KConfigSkeleton::ItemColor( currentGroup(), QStringLiteral( "color #1" ), mColor[1], defaultColor[1] );
  addItem( itemColor[1], QStringLiteral( "Color1" ) );
  itemColor[2] = new KConfigSkeleton::ItemColor( currentGroup(), QStringLiteral( "color #2" ), mColor[2], defaultColor[2] );
  addItem( itemColor[2], QStringLiteral( "Color2" ) );
  itemColor[3] = new KConfigSkeleton::ItemColor( currentGroup(), QStringLiteral( "color #3" ), mColor[3], defaultColor[3] );
  addItem( itemColor[3], QStringLiteral( "Color3" ) );
  QList<KConfigSkeleton::ItemEnum::Choice> valuesMouseAction;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("Encrypt");
    valuesMouseAction.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("Decrypt");
    valuesMouseAction.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("CrashNBurn");
    valuesMouseAction.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("PumpNDump");
    valuesMouseAction.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemMouseAction[3];
  itemMouseAction[0] = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "right_mouse_action" ), mMouseAction[0], valuesMouseAction, Decrypt );
  itemMouseAction[0]->setValueForChoice(QStringLiteral( "CrashNBurn" ), QStringLiteral( "Crash'n Burn" ));
  addItem( itemMouseAction[0], QStringLiteral( "MouseActionright" ) );
  itemMouseAction[1] = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "mid_mouse_action" ), mMouseAction[1], valuesMouseAction, Encrypt );
  itemMouseAction[1]->setValueForChoice(QStringLiteral( "CrashNBurn" ), QStringLiteral( "Crash'n Burn" ));
  addItem( itemMouseAction[1], QStringLiteral( "MouseActionmid" ) );
  itemMouseAction[2] = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "left_mouse_action" ), mMouseAction[2], valuesMouseAction, PumpNDump );
  itemMouseAction[2]->setValueForChoice(QStringLiteral( "CrashNBurn" ), QStringLiteral( "Crash'n Burn" ));
  addItem( itemMouseAction[2], QStringLiteral( "MouseActionleft" ) );
  KConfigSkeleton::ItemString  *itemFooBar;
  itemFooBar = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "foo bar" ), mFooBar );
  addItem( itemFooBar, QStringLiteral( "FooBar" ) );
  KConfigSkeleton::ItemInt  *itemAge;
  itemAge = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "Age" ), mAge, 35 );
  itemAge->setMinValue(8);
  itemAge->setMaxValue(88);
  addItem( itemAge, QStringLiteral( "Age" ) );
}

Test5::~Test5()
{
  if (s_globalTest5.exists() && !s_globalTest5.isDestroyed()) {
    s_globalTest5()->q = nullptr;
  }
}

