// This file is generated by kconfig_compiler_kf6 from test13.kcfg.
// All changes you do to this file will be lost.

#include "test13.h"

Test13::Test13( )
  : KConfigSkeleton( KConfig::ConfigAssociation::KdeApp, QStringLiteral( "muondatasourcesrc" ) )
{
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&Test13::itemChanged);

  setCurrentGroup( QStringLiteral( "kamoso" ) );

  KConfigSkeleton::ItemUrl  *itemPicturesDir;
  itemPicturesDir = new KConfigSkeleton::ItemUrl( currentGroup(), QStringLiteral( "picturesDir" ), mPicturesDir );
  addItem( itemPicturesDir, QStringLiteral( "picturesDir" ) );
  KConfigCompilerSignallingItem  *itemBrightness;
  KConfigSkeleton::ItemDouble  *innerItemBrightness;
  innerItemBrightness = new KConfigSkeleton::ItemDouble( currentGroup(), QStringLiteral( "brightness" ), mBrightness );
  itemBrightness = new KConfigCompilerSignallingItem(innerItemBrightness, this, notifyFunction, signalBrightnessChanged);
  addItem( itemBrightness, QStringLiteral( "brightness" ) );
  KConfigSkeleton::ItemBool  *itemStartsWithUppercase;
  itemStartsWithUppercase = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "StartsWithUppercase" ), mStartsWithUppercase );
  addItem( itemStartsWithUppercase, QStringLiteral( "StartsWithUppercase" ) );
}

Test13::~Test13()
{
}


void Test13::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalBrightnessChanged:
    Q_EMIT brightnessChanged();
    break;
  }
}

#include "test13.moc"

